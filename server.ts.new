import express from 'express';
import cors from 'cors';
import * as dotenv from 'dotenv';
import { getDatabase } from './lib/mongodb.js';
import jwt from 'jsonwebtoken';

// Load environment variables
dotenv.config();

// Initialize express app
const app = express();
const PORT = process.env.PORT || 3000;

// Enable CORS and JSON parsing
app.use(cors({
  origin: 'http://localhost:5173', // Allow frontend origin
  credentials: true,
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization']
}));
app.use(express.json());

// Auth middleware
const authMiddleware = async (req: express.Request, res: express.Response, next: express.NextFunction) => {
  const authHeader = req.headers.authorization;
  if (!authHeader?.startsWith('Bearer ')) {
    return res.status(401).json({ error: 'No token provided' });
  }

  const token = authHeader.split(' ')[1];
  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET || 'default_secret');
    (req as any).user = decoded;
    next();
  } catch (error) {
    return res.status(401).json({ error: 'Invalid token' });
  }
};

// Login endpoint
app.post('/api/auth/login', async (req, res) => {
  try {
    const { email, password } = req.body;

    if (!email || !password) {
      return res.status(400).json({ error: 'Email and password are required' });
    }

    // Check against environment variables
    if (email !== process.env.ADMIN_EMAIL || password !== process.env.ADMIN_PASSWORD) {
      return res.status(401).json({ error: 'Invalid credentials' });
    }

    const token = jwt.sign({
      userId: 'admin',
      email: process.env.ADMIN_EMAIL,
      role: 'admin'
    }, process.env.JWT_SECRET || 'default_secret', { expiresIn: '24h' });

    return res.status(200).json({
      token,
      user: {
        id: 'admin',
        email: process.env.ADMIN_EMAIL,
        role: 'admin'
      }
    });
  } catch (error) {
    console.error('Login error:', error);
    return res.status(500).json({ error: 'Internal server error' });
  }
});

// Services endpoints
app.get('/api/services', async (req, res) => {
  try {
    const db = await getDatabase();
    const services = await db.collection('services').find().toArray();
    res.json(services);
  } catch (error) {
    console.error('Error fetching services:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// Business hours endpoints
app.get('/api/business-hours', async (req, res) => {
  try {
    const db = await getDatabase();
    const hours = await db.collection('businessHours').findOne({ active: true });
    res.json(hours?.schedule || []);
  } catch (error) {
    console.error('Error fetching business hours:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

app.put('/api/business-hours', authMiddleware, async (req, res) => {
  try {
    const { schedule } = req.body;
    
    // Validate schedule
    if (!Array.isArray(schedule) || schedule.length !== 7) {
      return res.status(400).json({ error: 'Invalid schedule format' });
    }

    const db = await getDatabase();
    await db.collection('businessHours').updateOne(
      { active: true },
      { 
        $set: { 
          schedule,
          updatedAt: new Date()
        }
      },
      { upsert: true }
    );

    res.status(200).json({ message: 'Business hours updated successfully' });
  } catch (error) {
    console.error('Error updating business hours:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

app.listen(PORT, () => {
  console.log(`API Server running on port ${PORT}`);
});
